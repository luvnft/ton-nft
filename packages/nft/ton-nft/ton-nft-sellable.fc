;;
;;  TON NFT Smart Contract
;;

int ApiOps::GiftTo() inline { return 0x9d84cf96; }
int ApiOps::PlaceBid() inline { return 0x5cb63e53; }
int ApiOps::EnableSelling() inline { return 0x2ed7c261; }
int ApiOps::DisableSelling() inline { return 0x3f4bb568; }
int ApiOps::AcceptLastBid() inline { return 0x569921e8; }

int ResponseCodes::OpNotSupported() inline { return 0xffffffff; }
int ResponseCodes::OpNotAllowed() inline { return 0xfffffffe; }


;; sender_address, query_id, op, msg_value
global (slice, int, int, int) query_info;

;;
;;
;;  Storage
;;
;;  :Metadata Cell:
;;
;;  uint10 name_len
;;  name_len * bit name
;;  uint10 symbol_len
;;  symbol_len * bit symbol
;;
;;
;;  :Root Cell:
;;
;;  uint1 inited
;;  metadata_cell metadata
;;  addr_std$10 creator
;;  addr_std$10 owner
;;  cell content
;;  sales_cell sales
;;
;;  :Sales cell:
;;
;;  uint1 is_on_sale
;;  uint1 is_last_bid_historical
;;  grams last_bid_value
;;  addr_std$10 last_bidder
;;  uint8 fees_percent
;;  addr_std$10 fees_destination
;;  uint8 royalties_percent
;;  addr_std$10 royalties_destination
;;
;;


(slice, (int, int, int, slice, int, slice, int, slice)) ~load_sales_data(slice ds) inline {

    ;; parse_std_addr()
    var res = (
        ds~load_uint(1),              ;; is_on_sale
        ds~load_uint(1),              ;; is_last_bid_historical
        ds~load_grams(),              ;; last_bid_value
        ds~load_msg_addr(),           ;; last_bidder
        ds~load_uint(8),              ;; fees_percent
        ds~load_msg_addr(),           ;; fees_destination
        ds~load_uint(8),              ;; royalties_percent
        ds~load_msg_addr()            ;; royalties_destination
    );

    return (ds, res);
}

builder store_sales_data(builder b, var ds) impure {
    (
        int is_on_sale,
        int is_last_bid_historical, 
        int last_bid_value, 
        slice last_bidder, 
        int fees_percent, 
        slice fees_destination,
        int royalties_percent,
        slice royalties_destination
    ) = ds;

    return b
        .store_uint(is_on_sale, 1)
        .store_uint(is_last_bid_historical, 1)
        .store_grams(last_bid_value)
        .store_slice(last_bidder)
        .store_uint(fees_percent, 8)
        .store_slice(fees_destination)
        .store_uint(royalties_percent, 8)
        .store_slice(royalties_destination);
}

_ load_data() impure {
    slice ds = get_data().begin_parse();
    int inited = ds~load_uint(1);     ;; inited
    var res = (
        ds~load_ref(),                ;; metadata cell
        ds~load_msg_addr(),           ;; creator
        ds~load_msg_addr(),           ;; owner
        ds~load_ref(),                ;; content
        ds~load_ref()                 ;; sales cell
    );
    ds.end_parse();
    return res;
}

() store_data(var ds) impure {
    (cell metadata_cell, slice creator, slice owner, cell content, cell sales_cell) = ds;
    set_data(
        begin_cell()
            .store_uint(1, 1)
            .store_ref(metadata_cell)
            .store_slice(creator)
            .store_slice(owner)
            .store_ref(content)
            .store_ref(sales_cell)
            .end_cell()
    );
}

;;
;; Serializes
;; addr_std$10 anycast:(Maybe Anycast) workchain_id:int8 address:bits256 = MsgAddressInt;
;; output is 267 bits
;;
slice pack_std_addr(int wc, int addr) {
    return begin_cell()
        .store_uint(2, 2)
        .store_uint(0, 1)
        .store_int(wc, 8)
        .store_uint(addr, 256)
        .end_cell()
        .begin_parse();
}

(slice, (int)) ~load_decimal_symbol(slice source) {
  int n = source~load_uint(8);
  n = n - 48;
  throw_unless(9, n >= 0);
  throw_if(9, n > 9);
  return (source, (n));
}

(slice, (int)) ~load_hex_symbol(slice source) {
    int n = source~load_uint(8);
    n = n - 48;
    throw_unless(9, n >= 0);
    if (n < 10) {
        return (source, (n));
    }
    n = n - 7;
    throw_unless(9, n >= 0);
    if (n < 16) {
        return (source, (n));
    }
    n = n - 32;
    throw_unless(9, (n >= 0) & (n < 16));
    return (source, (n));
}

(slice, (int, int)) ~parse_raw_text_address(slice source) {
    int n = source~load_uint(8);
    var is_negative = n == 0x2d; ;; minus sign

    int wc = 0;

    ;; Parse workchain id
    while (source.preload_uint(8) != 0x3a) {
        var next_decimal = source~load_decimal_symbol();

        wc *= 10;
        wc += next_decimal;
    }

    if (is_negative) {
        wc *= -1;
    }

    ;; Handle : separator
    var separator = source~load_uint(8);
    throw_unless(9, separator == 0x3a);

    ;; Parse address 64 bytes
    int address = 0;
    repeat (64) {
        address = address * 16 + source~load_hex_symbol();
    }

    return (source, (wc, address));
}

() send_money(int wc, int addr, int amount, int mode) impure {
    send_raw_message(
        begin_cell()
            .store_uint(0xc4, 9)
            .store_int(wc, 8)
            .store_uint(addr, 256)
            .store_grams(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32) ;; Simple money transfer
            .end_cell(), 
        mode
    );
}

() send_response(slice addr, int tag, int query_id, int body, int grams, int mode) impure {
    var msg = begin_cell()
        .store_uint (0x18, 6)
        .store_slice(addr)
        .store_grams(grams)
        .store_uint (0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint (tag, 32)
        .store_uint (query_id, 64);
    if (body >= 0) {
        msg~store_uint(body, 32);
    }
    send_raw_message(msg.end_cell(), mode);
}

() send_error(int error_code) impure {
    var (addr, query_id, op, _) = query_info;
    return send_response(addr, error_code, query_id, op, 0, 64);
}

() send_ok(int price) impure {
    var (addr, query_id, op, _) = query_info;
    if (price == 0) {
        return send_response(addr, 0xef6b6179, query_id, op, 0, 64);
    }

    raw_reserve(price, 4);
    return send_response(addr, 0xef6b6179, query_id, op, 0, 128);
}

() handle_gift(int destination_wc, int destination_address) impure {

    (slice sender, _, _, _) = query_info;

    (cell metadata, slice creator, slice owner, cell content, cell sales) = load_data();

    (int owner_wc, int owner_address) = parse_std_addr(owner);
    (int sender_wc, int sender_address) = parse_std_addr(sender);

    ;; Check that sender is owner
    if ((owner_wc != sender_wc) | (owner_address != sender_address)) {
        return send_error(ResponseCodes::OpNotAllowed());
    }

    ;; Send error if trying to gift yourself
    if ((owner_wc == destination_wc) & (owner_address == destination_address)) {
        return send_error(ResponseCodes::OpNotAllowed());
    }

    var new_owner_address = pack_std_addr(destination_wc, destination_address);
    store_data((metadata, creator, new_owner_address, content, sales));    
}

() handle_place_a_bid() impure {

    var (slice sender_address, _, _, int msg_value) = query_info;

    (cell metadata, slice creator, slice owner, cell content, cell sales) = load_data();

    var ds = sales.begin_parse();

    (
        int is_on_sale, 
        int is_last_bid_historical,
        int last_bid_value, 
        slice last_bidder, 
        int fees_percent, 
        slice fees_destination,
        int royalties_percent,
        slice royalties_destination
    ) = ds~load_sales_data();

    ;; Send error if NFT is not on sale
    if (is_on_sale == 0) {
        return send_error(ResponseCodes::OpNotAllowed());
    }

    ;; Substract reserved 1TON for fees
    var bid_value = msg_value - 1000000000;

    ;; Send error if bid is less than 0.1TON
    if (bid_value < 100000000) {
        return send_error(ResponseCodes::BidTooSmall());
    }

    ;; Send error if last bid was greater or equal
    if (last_bid_value >= bid_value) {
        return send_error(ResponseCodes::BidTooSmall());
    }

    (int owner_wc, int owner_address) = parse_std_addr(owner);
    (int sender_wc, int sender_addr) = sender_address.parse_std_addr();

    ;; Send error if bidder is owner
    if ((owner_wc == sender_wc) & (sender_addr == owner_address)) {
        return send_error(ResponseCodes::OpNotAllowed());
    }

    ;; Return value to previous bidder if last_bid > 0 and bid is not historical
    if ((last_bid_value > 0) & ( ~ is_last_bid_historical )) {
        ;; reserve all but last bid value
        raw_reserve(last_bid_value, 3);
        var (wc, address) = last_bidder.parse_std_addr();
        send_money(wc, address, last_bid_value, 2);
    }
    
    ;; Save data with new bid
    var sales_data = (
        is_on_sale, 
        0,                      ;; Mark last bid as actiove
        bid_value,
        sender_address,
        fees_percent,
        fees_destination,
        royalties_percent,
        royalties_destination
    );
        
    var new_sales_data = begin_cell()
        .store_sales_data(sales_data)
        .end_cell();

    store_data(
        metadata, 
        creator, 
        owner, 
        content, 
        new_sales_data
    );
    
    ;; Send ok response
    send_ok(bid_value);
}

() handle_enable_selling() impure {

    (slice sender_address, _, _, _) = query_info;

    (cell metadata, slice creator, slice owner, cell content, cell sales) = load_data();

    var ds = sales.begin_parse();
    (
        int is_on_sale, 
        int is_last_bid_historical,
        int last_bid_value, 
        slice last_bidder, 
        int fees_percent, 
        slice fees_destination,
        int royalties_percent,
        slice royalties_destination
    ) = ds~load_sales_data();

    ;; Send error if already on sale
    if (is_on_sale == 1) {
        return send_error(ResponseCodes::AlreadyOnSale());
    }
 
    (int owner_wc, int owner_address) = parse_std_addr(owner);
    (int sender_wc, int sender_address) = parse_std_addr(sender_address);

    ;; Check that sender is owner
    if ((owner_wc != sender_wc) | (owner_address != sender_address)) {
        return send_error(ResponseCodes::OpNotAllowed());
    }

    var sales_data = (
        1,                  ;; Set selling
        1,                  ;; Set last bid as historical
        last_bid_value,
        last_bidder,
        fees_percent,
        fees_destination,
        royalties_percent,
        royalties_destination
    );
        
    var new_sales_data = begin_cell()
        .store_sales_data(sales_data)
        .end_cell();

    store_data(
        metadata, 
        creator, 
        owner, 
        content, 
        new_sales_data
    );
    
    ;; Send ok response
    send_ok(0);
}

() handle_disable_selling() impure {

    (slice sender_address, _, _, _) = query_info;

    (cell metadata, slice creator, slice owner, cell content, cell sales) = load_data();

    var ds = sales.begin_parse();
    (
        int is_on_sale, 
        int is_last_bid_historical,
        int last_bid_value, 
        slice last_bidder, 
        int fees_percent, 
        slice fees_destination,
        int royalties_percent,
        slice royalties_destination
    ) = ds~load_sales_data();

    ;; Send error if already not on sale
    if (is_on_sale == 0) {
        return send_error(ResponseCodes::AlreadyNotOnSale());
    }
 
    (int owner_wc, int owner_address) = parse_std_addr(owner);
    (int sender_wc, int sender_address) = parse_std_addr(sender_address);

    ;; Check that sender is owner
    if ((owner_wc != sender_wc) | (owner_address != sender_address)) {
        return send_error(ResponseCodes::OpNotAllowed());
    }

    ;; Return last bid value to bidder if bid is not historical
    if (is_last_bid_historical == 0) {
        ;; reserve all but last bid value
        raw_reserve(last_bid_value, 3);

        var (wc, address) = last_bidder.parse_std_addr();
        send_money(wc, address, last_bid_value, 2);
    }

    var sales_data = (
        0,                  ;; Set as not selling 
        1,                  ;; Set last bid as historical
        last_bid_value,
        last_bidder,
        fees_percent,
        fees_destination,
        royalties_percent,
        royalties_destination
    );
        
    var new_sales_data = begin_cell()
        .store_sales_data(sales_data)
        .end_cell();

    store_data(
        metadata, 
        creator, 
        owner, 
        content, 
        new_sales_data
    );
    
    ;; Send ok response
    send_ok(0);
}

() handle_accept_last_bid() impure {

    (slice sender_address, _, _, _) = query_info;

    (cell metadata, slice creator, slice owner, cell content, cell sales) = load_data();

    var ds = sales.begin_parse();
    (
        int is_on_sale, 
        int is_last_bid_historical,
        int last_bid_value, 
        slice last_bidder, 
        int fees_percent, 
        slice fees_destination,
        int royalties_percent,
        slice royalties_destination
    ) = ds~load_sales_data();

    ;; Throw if not on sale
    throw_if(400, is_on_sale == 0);
 
    (int owner_wc, int owner_address) = parse_std_addr(owner);
    (int sender_wc, int sender_address) = parse_std_addr(sender_address);

    ;; Throw if sender is not owner
    throw_unless(400, owner_wc == sender_wc);
    throw_unless(400, sender_address == owner_address);

    ;; Throw if last bid is historical
    throw_if(400, is_last_bid_historical == 1);
    ;; Throw if last bid is 0
    throw_if(400, last_bid_value == 0);

    ;; reserve all but last bid value
    raw_reserve(last_bid_value, 3);

    int remaining = last_bid_value;

    if (fees_percent > 0) {
        ;; Rounding DOWN
        int fees_value = (last_bid_value / 100) * fees_percent;

        ;; Send fees
        var (fd_wc, fd_address) = fees_destination.parse_std_addr();
        send_money(fd_wc, fd_address, fees_value, 2);

        remaining = remaining - fees_value;
    }
    if (royalties_percent > 0) {
        ;; Rounding DOWN
        int royalties_value = (last_bid_value / 100) * royalties_percent;

        ;; Send royalties
        var (r_wc, r_address) = royalties_destination.parse_std_addr();
        send_money(r_wc, r_address, royalties_value, 2);

        remaining = remaining - royalties_value;
    }

    ;; Send remaining value to previous owner
    send_money(owner_wc, owner_address, remaining, 2);

    var sales_data = (
        0,                  ;; Set as not selling 
        1,                  ;; Set last bid as historical
        last_bid_value,
        last_bidder,
        fees_percent,
        fees_destination,
        royalties_percent,
        royalties_destination
    );
        
    var new_sales_data = begin_cell()
        .store_sales_data(sales_data)
        .end_cell();

    store_data(
        metadata, 
        creator, 
        last_bidder,              ;; Set new owner
        content, 
        new_sales_data
    );
    
    ;; Send ok response
    ;; send_ok(0);
}

() handle_comment_message (slice msg_body) impure {
    ;; (slice sender_address, _, _, _) = query_info;

    ;; For giftTo request one Cell is not enough
    if (msg_body.slice_data_empty?() & (msg_body.slice_refs() == 1)) {
      cell ref_msg = msg_body~load_ref();
      msg_body = ref_msg.begin_parse();
    }

    int command = msg_body~load_uint(32);

    ;; 'gift'
    if (command == 0x67696674) {
        ;; 'To:'
        if (msg_body~load_uint(24) != 0x546f3a) {
            ;; Operation not supported
            return send_error(0xffffffff);
        }
        
        (int dest_wc, int dest_addr) = msg_body~parse_raw_text_address();

        return handle_gift(dest_wc, dest_addr);
    }

    ;; 'pbid'
    if (command == 0x70626964) {
        return handle_place_a_bid();
    }

    ;; 'sel+'
    if (command == 0x73656c2b) {
        return handle_enable_selling();
    }   
    
    ;; 'sel-'
    if (command == 0x73656c2d) {
        return handle_disable_selling();
    }

    ;; 'acpt'
    if (command == 0x61637074) {
        return handle_accept_last_bid();
    }

    ;; Operation not supported
    return send_error(ResponseCodes::OpNotSupported());
}

() recv_internal(int smc_balance, int msg_value, cell msg, slice msg_body) {
    ;; ignore empty messages
    if (msg_body.slice_empty?()) {
        return ();
    }

    slice cs = msg.begin_parse();
    int flags = cs~load_uint(4);

    ;; ignore all bounced messages
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    ;; (int wc, int addr) = parse_std_addr(sender_address);

    int query_id = 0;   
    int op = msg_body~load_uint(32);

    query_info = (sender_address, query_id, op, msg_value);


    ;; Message with comment
    if (op == 0) {
        return handle_comment_message(msg_body);
    }

    if (msg_body.slice_bits() >= 64) { 
        query_id = msg_body~load_uint(64);
        query_info = (sender_address, query_id, op, msg_value);
    }

    ;; Gift to
    if (op == ApiOps::GiftTo()) {
        var dest_addr = msg_body~load_msg_addr();

        (int wc, int addr) = parse_std_addr(dest_addr);
        return handle_gift(wc, addr);
    }

    ;; Place a bid
    if (op == ApiOps::PlaceBid()) {
        return handle_place_a_bid();
    }

    ;; Enable selling
    if (op == ApiOps::EnableSelling()) {
        return handle_enable_selling();
    }

    ;; Disable selling
    if (op == ApiOps::DisableSelling()) {
        return handle_disable_selling();
    }

    ;; Accept last bid
    if (op == ApiOps::AcceptLastBid()) {
        return handle_accept_last_bid();
    }

    ;; Operation not supported
    return send_error(ResponseCodes::OpNotSupported());
}

() recv_external(slice in_msg) {
    slice ds = get_data().begin_parse();

    int inited = ds~load_uint(1);       ;; inited
    var metadata = ds~load_ref();       ;; metadata cell
    var creator = ds~load_msg_addr();   ;; creator
    var owner = ds~load_msg_addr();     ;; owner
    var content = ds~load_ref();        ;; content
    var sales_cell = ds~load_ref();     ;; sales

    ds.end_parse();
    throw_if(9, inited);
    accept_message();
    var res = (metadata, creator, owner, content, sales_cell);
    store_data(res);
}

;;
;;  GET Methods
;;

;;
;;
;;  Returns basic NFT info in format:
;;
;;
;;
;;  :Metadata Cell:
;;
;;  uint10 name_len
;;  name_len * bit name
;;  uint10 symbol_len
;;  symbol_len * bit symbol
;;
;;  :Result Cell:
;;
;;  metadata_cell metadata
;;  addr_std$10 creator
;;  addr_std$10 owner
;;  cell content
;;
;;
        
cell get_nft_basic_info() method_id {
    (cell metadata, slice creator, slice owner, cell content, _) = load_data();

    var res = begin_cell()
        .store_ref(metadata)
        .store_slice(creator)
        .store_slice(owner)
        .store_ref(content)
        .end_cell();

    return res;
}

;;
;;
;;  Returns NFT sales info in format:
;;
;;
;;  :Metadata Cell:
;;
;;  uint1 is_on_sale
;;  uint1 is_last_bid_historical
;;  grams last_bid_value
;;  addr_std$10 last_bidder
;;  uint8 fees_percent
;;  addr_std$10 fees_destination
;;  uint8 royalties_percent
;;  addr_std$10 royalties_destination
;;
;;

cell get_nft_sales_info() method_id {
    (_, _, _, _, cell sales) = load_data();
    return sales;
}

;;
;;  Introspection
;;

(int, int, int, int, int) supported_interfaces() method_id {
    ;; 61457: Basic NFT interface
    ;; 97398: Basic NFT interface with comment messages
    ;; 76948: Sellable NFT interface
    ;; 37183: Sellable NFT interface with comment messages
    ;; 81264: BasicIntrospection
    return (61457, 97398, 76948, 37183, 81264);
}